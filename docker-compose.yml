services:
  genfity-wa-support:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: genfity-wa-support
    environment:
      # Primary Database
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
      # Transactional Database
      - TRANSACTIONAL_DB_HOST=${TRANSACTIONAL_DB_HOST}
      - TRANSACTIONAL_DB_PORT=${TRANSACTIONAL_DB_PORT}
      - TRANSACTIONAL_DB_USER=${TRANSACTIONAL_DB_USER}
      - TRANSACTIONAL_DB_PASSWORD=${TRANSACTIONAL_DB_PASSWORD}
      - TRANSACTIONAL_DB_NAME=${TRANSACTIONAL_DB_NAME}
      - TRANSACTIONAL_DB_SSLMODE=${TRANSACTIONAL_DB_SSLMODE}
      # Server Configuration
      - PORT=${PORT}
      - TZ=${TZ}
      - GIN_MODE=${GIN_MODE}
      # Gateway Configuration
      - GATEWAY_MODE=${GATEWAY_MODE}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW}
      - DEFAULT_RATE_LIMIT=${DEFAULT_RATE_LIMIT}
      # API Configuration
      - WEBHOOK_VERIFY_TOKEN=${WEBHOOK_VERIFY_TOKEN}
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      # WA Server Configuration
      - WA_SERVER_URL=${WA_SERVER_URL}
      - WA_ADMIN_TOKEN=${WA_ADMIN_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${PORT}:${PORT}"
    networks:
      - genfity-network
    depends_on:
      - db-check
      - transactional-db-check
    restart: unless-stopped
    healthcheck:
      # Use curl -f to perform a GET and return non-zero on non-2xx responses.
      # This avoids HEAD requests (wget --spider) which some handlers don't support.
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db-check:
    image: postgres:16
    container_name: wa-support-db-check
    environment:
      - PGHOST=${DB_HOST}
      - PGPORT=${DB_PORT}
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME}
    networks:
      - genfity-network
    command: >
      sh -c "
        echo 'Checking database connection...'
        until pg_isready -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d postgres; do
          echo 'Waiting for PostgreSQL server...'
          sleep 2
        done
        echo 'PostgreSQL server is ready!'
        
        echo 'Checking if database exists...'
        if psql -h ${DB_HOST} -U ${DB_USER} -d postgres -lqt | cut -d \\| -f 1 | grep -qw ${DB_NAME}; then
          echo 'Database ${DB_NAME} exists'
        else
          echo 'Database ${DB_NAME} does not exist, creating...'
          psql -h ${DB_HOST} -U ${DB_USER} -d postgres -c 'CREATE DATABASE ${DB_NAME};'
          echo 'Database ${DB_NAME} created'
        fi
        
        echo 'Running migrations if needed...'
        echo 'Database check completed successfully'
      "

  transactional-db-check:
    image: postgres:16
    container_name: transactional-db-check
    environment:
      - PGHOST=${TRANSACTIONAL_DB_HOST}
      - PGPORT=${TRANSACTIONAL_DB_PORT}
      - PGUSER=${TRANSACTIONAL_DB_USER}
      - PGPASSWORD=${TRANSACTIONAL_DB_PASSWORD}
      - PGDATABASE=${TRANSACTIONAL_DB_NAME}
    networks:
      - genfity-network
    command: >
      sh -c "
        echo 'Checking transactional database connection...'
        until pg_isready -h ${TRANSACTIONAL_DB_HOST} -p ${TRANSACTIONAL_DB_PORT} -U ${TRANSACTIONAL_DB_USER} -d postgres; do
          echo 'Waiting for Transactional PostgreSQL server...'
          sleep 2
        done
        echo 'Transactional PostgreSQL server is ready!'
        
        echo 'Checking if transactional database exists...'
        if psql -h ${TRANSACTIONAL_DB_HOST} -U ${TRANSACTIONAL_DB_USER} -d postgres -lqt | cut -d \\| -f 1 | grep -qw ${TRANSACTIONAL_DB_NAME}; then
          echo 'Database ${TRANSACTIONAL_DB_NAME} exists'
        else
          echo 'Database ${TRANSACTIONAL_DB_NAME} does not exist, creating...'
          psql -h ${TRANSACTIONAL_DB_HOST} -U ${TRANSACTIONAL_DB_USER} -d postgres -c 'CREATE DATABASE ${TRANSACTIONAL_DB_NAME};'
          echo 'Database ${TRANSACTIONAL_DB_NAME} created'
        fi
        
        echo 'Transactional database check completed successfully'
      "

networks:
  genfity-network:
    external: true
    name: server_genfity-network

# ==========================================
# Usage:
#   Copy .env.example to .env and configure
#   Then run: docker compose up -d
# ==========================================
